=============================================================
__config_site - How libc++ captures configuration information
=============================================================

.. contents::
   :local:

The Problem
===========

Currently the libc++ CMake build supports many different configuration options.
Some of which need to be captured and stored inside the libc++ headers in order
to work correctly after libc++ is installed.

For example the CMake option "-DLIBCXX_ENABLE_THREADS=OFF" is used to build
libc++ on platforms that have no pthread support. A library built without threading
support can only be used with headers that also disable threading support. In order
to support these kind of options libc++ needs to be able to capture configuration
time decisions and store them in the libc++ headers.

This document describes how libc++ captures configuration options in
the headers and the rational for the design.

Design Goals
============

* The solution should take into account the needs of libc++ developers as well
  as it's users.

* The solution should not INSTALL any additional headers. We don't want an extra
  #include slowing everybody down.

* The solution should not modify any existing headers EXCEPT during installation.
  It makes developers lives harder if they have to regenerate the libc++ headers
  every time they are modified.

* The solution should not make any of the libc++ headers dependant on
  files generated by the build system. The headers should be able to compile
  out of the box without any modification.

* The solution should not have ANY effect on users who don't need special
  configuration options. The vast majority of users will never need this so it
  shouldn't cost them.

It's important to remember that we only need to capture the configuration decisions
in the installed version of the headers. We already have this information when
we are building and testing libc++. Therefore we should focus on a solution

Breakdown
=========

1. Capture the configuration decisions in a C++ header named __config_site.
2. When building and testing libc++ we manually include the __config_site header
   on the command line.
3.



Solution
========

The simplest way to capture the configuration options in CMake is to generate
a C++ header containing macro definitions for the options. In libc++'s case we
create a header called "__config_site" and store it in the "build/include"
directory. The `__config_site` header is never installed or included by any
libc++ headers. Instead it is prepended to the "__config" header during installation.
The resulting __config header contains all of the captured configuration options
and the "__config_site" header is discarded.

Note that we only generate the new "__config" header for installation and not
before that. While building and testing we manually include "__config_site"
on the command line. This allows us to use the __config header in the source tree
directly with no need for modification.


Step by Step Explanation
========================

Each step in the build process handles the "__config_site" slightly differently.
The descriptions below explains what happens during each step.


Configuration Time
------------------

1. At CMake configuration time we generate a "__config_site" header from the
   "src/include/__config_site.in" file. The generated file contains a macro
   definition for each configuration option passed to CMake. This header will
   never be installed or included directly by another file.

Build Time
----------

1. Build libc++ using the headers in "src/include" and use "-include" to
   to manually include "build/include/__config_site" header.

Test Time
---------

1. Build the libc++ tests using the headers in "src/include" and use "-include"
   to manually include "build/include/__config_site" header.

Installation Time
-----------------

This is where the real magic happens. The trick is to prepend the "__config_site"
header to the "__config" header you plan to install.

1. First we copy the headers from "libcxx/include" to "build/include/c++/v1".

2. We then prepend the contents of "__config_site" to "build/include/c++/v1/__config".
   By doing this we remove the need for an extra configuration header.

3. Finally we install the headers in "build/include/c++/v1". The installed
   "__config" header contains all of the required configuration options at the
   top of the file.

Although steps #1 and #2 actually happen during build time their purpose is to
support the installation rule.

