//===------------------------ __refstring ---------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is dual licensed under the MIT and the University of Illinois Open
// Source Licenses. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP___REFSTRING
#define _LIBCPP___REFSTRING

#include <__config>
#include <stdexcept>
#include <cstddef>
#include <cstring>
#ifdef __APPLE__
#include <dlfcn.h>
#include <mach-o/dyld.h>
#endif

_LIBCPP_BEGIN_NAMESPACE_STD

namespace __refstring_imp { namespace {
typedef int count_t;

struct _Rep_base {
    std::size_t len;
    std::size_t cap;
    count_t     count;
};

inline _Rep_base* rep_from_data(const char *__data_) noexcept {
    char *__data = const_cast<char *>(__data_);
    return reinterpret_cast<_Rep_base *>(__data - sizeof(_Rep_base));
}

inline char * data_from_rep(_Rep_base *__rep) noexcept {
    char *__data = reinterpret_cast<char *>(__rep);
    return __data + sizeof(*__rep);
}

#if defined(__APPLE__)
inline
const char* compute_gcc_empty_string_storage() _NOEXCEPT
{
    void* handle = dlopen("/usr/lib/libstdc++.6.dylib", RTLD_NOLOAD);
    if (handle == nullptr)
        return nullptr;
    void* sym = dlsym(handle, "_ZNSs4_Rep20_S_empty_rep_storageE");
    if (sym == nullptr)
        return nullptr;
    return data_from_rep(reinterpret_cast<_Rep_base *>(sym));
}

inline
const char*
get_gcc_empty_string_storage() _NOEXCEPT
{
    static const char* p = compute_gcc_empty_string_storage();
    return p;
}
#endif

}} // namespace __refstring_imp

using namespace __refstring_imp;

inline
__libcpp_refstring::__libcpp_refstring(const char* __msg) {
    std::size_t __len = strlen(__msg);
    _Rep_base* __rep = static_cast<_Rep_base *>(::operator new(sizeof(*__rep) + __len + 1));
    __rep->len = __len;
    __rep->cap = __len;
    __rep->count = 0;
    char *__data = data_from_rep(__rep);
    std::memcpy(__data, __msg, __len + 1);
    __imp_ = __data;
}

inline
__libcpp_refstring::__libcpp_refstring(const __libcpp_refstring &__s) _NOEXCEPT
    : __imp_(__s.__imp_)
{
    if (__uses_refcount())
        __sync_add_and_fetch(&rep_from_data(__imp_)->count, 1);
}

inline
__libcpp_refstring& __libcpp_refstring::operator=(__libcpp_refstring const& __s) _NOEXCEPT {
    bool __adjust_old_count = __uses_refcount();
    struct _Rep_base *__old_rep = rep_from_data(__imp_);
    __imp_ = __s.__imp_;
    if (__uses_refcount())
        __sync_add_and_fetch(&rep_from_data(__imp_)->count, 1);
    if (__adjust_old_count)
    {
        if (__sync_add_and_fetch(&__old_rep->count, count_t(-1)) < 0)
        {
            ::operator delete(__old_rep);
        }
    }
    return *this;
}

inline
__libcpp_refstring::~__libcpp_refstring() {
    if (__uses_refcount()) {
        _Rep_base* __rep = rep_from_data(__imp_);
        if (__sync_add_and_fetch(&__rep->count, count_t(-1)) < 0) {
            ::operator delete(__rep);
        }
    }
}

inline
bool __libcpp_refstring::__uses_refcount() const {
#ifdef __APPLE__
    return __imp_ != get_gcc_empty_string_storage();
#else
    return true;
#endif
}

_LIBCPP_END_NAMESPACE_STD

#endif //_LIBCPP___REFSTRING
