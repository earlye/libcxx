// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is dual licensed under the MIT and the University of Illinois Open
// Source Licenses. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_EXPERIMENTAL___MEMORY
#define _LIBCPP_EXPERIMENTAL___MEMORY

#include <experimental/__config>

#include <experimental/utility>
#include <cstddef>
#include <type_traits>
#include <__functional_base>


_LIBCPP_BEGIN_NAMESPACE_LFTS_PMR

class _LIBCPP_TYPE_VIS_ONLY memory_resource;

memory_resource * set_default_resource(memory_resource *) _NOEXCEPT;
memory_resource * get_default_resource() _NOEXCEPT;

_LIBCPP_END_NAMESPACE_LFTS_PMR


_LIBCPP_BEGIN_NAMESPACE_LFTS

inline _LIBCPP_INLINE_VISIBILITY 
    uint32_t __count_leading_zeros(uint32_t __x) _NOEXCEPT
    {
#if defined(_LIBCPP_GNU_VER)
        return __x ? __builtin_clz(__x) : 32;
#else
        if (__x == 0) return 32;
        uint32_t __n = 0;
        if (__x <= 0x0000FFFF) {__n +=16; __x <<16;}
        if (__x <= 0x00FFFFFF) {__n += 8; __x << 8;}
        if (__x <= 0x0FFFFFFF) {__n += 4; __x << 4;}
        if (__x <= 0x3FFFFFFF) {__n += 2; __x << 2;}
        if (__x <= 0x7FFFFFFF) {__n += 1;}
        return __n;
#endif
    }

    inline _LIBCPP_ALWAYS_INLINE _LIBCPP_CONSTEXPR
    bool __is_pow_2(size_t __s) _NOEXCEPT
    {
        return __s && !(__s & (__s - 1));
    }

    inline _LIBCPP_INLINE_VISIBILITY
    size_t __next_pow_2(size_t __s) _NOEXCEPT
    {
        const size_t __i = 32 - _VSTD_LFTS::__count_leading_zeros(__s);
        return __s == 0 || __s == (1U<<__i) ? __s : (1U<<__i+1);
    }

    inline _LIBCPP_INLINE_VISIBILITY
    size_t __round_up_pow_2(size_t __s) _NOEXCEPT
    {
        return __is_pow_2(__s) ? __s : __next_pow_2(__s);
    }

    inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
    size_t __max_alignment() _NOEXCEPT
    {
        return alignment_of<max_align_t>::value;
    }

    // The alignment is 2 ^ (index of lowest set bit)
    inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
    size_t __alignment_for(size_t __s) _NOEXCEPT
    {
        return static_cast<int>(__s | __max_alignment())
            & ~(static_cast<int>(__s | __max_alignment()) - 1);
    }

    // Round __s up to next multiple of __a.
    inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
    size_t __aligned_allocation_size(size_t __s, size_t __a) _NOEXCEPT
    {
        return (__s + __a - 1) & ~(__a - 1);
    }

    inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
    size_t __auto_aligned_allocation_size(size_t __s) _NOEXCEPT
    {
        return __aligned_allocation_size(__s, __alignment_for(__s));
    }

template <
    class _Tp, class _Alloc
  , bool = uses_allocator<_Tp, _Alloc>::value
  , bool = __has_allocator_type<_Tp>::value
  >
struct __lfts_uses_allocator : public false_type {};

template <class _Tp, class _Alloc>
struct __lfts_uses_allocator<_Tp, _Alloc, false, false> : public false_type {};

template <class _Tp, class _Alloc, bool HasAlloc>
struct __lfts_uses_allocator<_Tp, _Alloc, true, HasAlloc> : public true_type {};

template <class _Tp, class _Alloc>
struct __lfts_uses_allocator<_Tp, _Alloc, false, true>
  : public integral_constant<bool
    , is_convertible<_Alloc, typename _Tp::allocator_type>::value
      || is_same<erased_type, typename _Tp::allocator_type>::value
    >
{};

template <bool _UsesAlloc, class _Tp, class _Alloc, class ..._Args>
struct __lfts_uses_alloc_ctor_imp
{
    static const int value = 0;
};

template <class _Tp, class _Alloc, class ..._Args>
struct __lfts_uses_alloc_ctor_imp<true, _Tp, _Alloc, _Args...>
{
    static const bool __ic_first
        = is_constructible<_Tp, allocator_arg_t, _Alloc, _Args...>::value;
    static const bool __ic_second
        = is_constructible<_Tp, _Args..., _Alloc>::value;

    static_assert(
        __ic_first || __ic_second
      , "Request for uses allocator construction is ill-formed"
      );

    static const int value = __ic_first ? 1 : 2;
};

template <class _Tp, class _Alloc, class ..._Args>
struct __lfts_uses_alloc_ctor
  : integral_constant<int,
        __lfts_uses_alloc_ctor_imp<
            __lfts_uses_allocator<_Tp, _Alloc>::value
          , _Tp, _Alloc, _Args...
        >::value
    >
{};

template <class _Tp, class _Alloc, class ..._Args>
inline _LIBCPP_INLINE_VISIBILITY
void __lfts_user_alloc_construct(
    _Tp * __store, const _Alloc & __a, _Args &&... __args)
{
    _VSTD::__user_alloc_construct_impl(
        typename __lfts_uses_alloc_ctor<_Tp, _Alloc, _Args...>::type()
       , __store, __a, _VSTD::forward<_Args>(__args)...
       );
}

_LIBCPP_END_NAMESPACE_LFTS

#endif /* _LIBCPP_EXPERIMENTAL___MEMORY */
