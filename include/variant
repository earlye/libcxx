// -*- C++ -*-
//===-------------------------- variant -----------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is dual licensed under the MIT and the University of Illinois Open
// Source Licenses. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_VARIANT
#define _LIBCPP_VARIANT

/*
    variant synopsis
namespace std {
  // ?.3, variant of value types
  template <class... Types> class variant;

  // ?.4, variant helper classes
  template <class T> struct variant_size; // undefined
  template <class T> struct variant_size<const T>;
  template <class T> struct variant_size<volatile T>;
  template <class T> struct variant_size<const volatile T>;
  template <class T> constexpr size_t variant_size_v
    = variant_size<T>::value;

  template <class... Types>
    struct variant_size<variant<Types...>>;

  template <size_t I, class T> struct variant_alternative; // undefined
  template <size_t I, class T> struct variant_alternative<I, const T>;
  template <size_t I, class T> struct variant_alternative<I, volatile T>;
  template <size_t I, class T> struct variant_alternative<I, const volatile T>;
  template <size_t I, class T>
    using variant_alternative_t = typename variant_alternative<I, T>::type;

  template <size_t I, class... Types>
    struct variant_alternative<I, variant<Types...>>;

  constexpr size_t variant_npos = -1;


  // ?.5, In-place construction
  template <class T> struct in_place_type_t{ explicit in_place_type_t() = default; };
  template <class T> constexpr in_place_type_t<T> in_place_type{};

  template <size_t I> struct in_place_index_t{ explicit in_place_index_t() = default; };
  template <size_t I> constexpr in_place_index_t<I> in_place_index{};

  // ?.6, Value access
  template <class T, class... Types>
    constexpr bool holds_alternative(const variant<Types...>&) noexcept;

  template <size_t I, class... Types>
    constexpr variant_alternative_t<I, variant<Types...>>&
    get(variant<Types...>&);
  template <size_t I, class... Types>
    constexpr variant_alternative_t<I, variant<Types...>>&&
    get(variant<Types...>&&);
  template <size_t I, class... Types>
    constexpr variant_alternative_t<I, variant<Types...>> const&
    get(const variant<Types...>&);
  template <size_t I, class... Types>
    constexpr variant_alternative_t<I, variant<Types...>> const&&
    get(const variant<Types...>&&);

  template <class T, class... Types>
    constexpr T& get(variant<Types...>&);
  template <class T, class... Types>
    constexpr T&& get(variant<Types...>&&);
  template <class T, class... Types>
    constexpr const T& get(const variant<Types...>&);
  template <class T, class... Types>
    constexpr const T&& get(const variant<Types...>&&);

  template <size_t I, class... Types>
    constexpr add_pointer_t<variant_alternative_t<I, variant<Types...>>>
    get_if(variant<Types...>*) noexcept;
  template <size_t I, class... Types>
    constexpr add_pointer_t<const variant_alternative_t<I, variant<Types...>>>
    get_if(const variant<Types...>*) noexcept;

  template <class T, class... Types>
    constexpr add_pointer_t<T> get_if(variant<Types...>*) noexcept;
  template <class T, class... Types>
    constexpr add_pointer_t<const T> get_if(const variant<Types...>*) noexcept;

  // ?.7, Relational operators
  template <class... Types>
    constexpr bool operator==(const variant<Types...>&,
                              const variant<Types...>&);
  template <class... Types>
    constexpr bool operator!=(const variant<Types...>&,
                              const variant<Types...>&);
  template <class... Types>
    constexpr bool operator<(const variant<Types...>&,
                             const variant<Types...>&);
  template <class... Types>
    constexpr bool operator>(const variant<Types...>&,
                             const variant<Types...>&);
  template <class... Types>
    constexpr bool operator<=(const variant<Types...>&,
                              const variant<Types...>&);
  template <class... Types>
    constexpr bool operator>=(const variant<Types...>&,
                              const variant<Types...>&);

  // ?.8, Visitation
  template <class Visitor, class... Variants>
  constexpr see below visit(Visitor&&, Variants&&...);

  // ?.9, Class monostate
  struct monostate;

  // ?.10, monostate relational operators
  constexpr bool operator<(monostate, monostate) noexcept;
  constexpr bool operator>(monostate, monostate) noexcept;
  constexpr bool operator<=(monostate, monostate) noexcept;
  constexpr bool operator>=(monostate, monostate) noexcept;
  constexpr bool operator==(monostate, monostate) noexcept;
  constexpr bool operator!=(monostate, monostate) noexcept;

  // ?.11, Specialized algorithms
  template <class... Types>
  void swap(variant<Types...>&, variant<Types...>&) noexcept(see below);

  // ?.12, class bad_variant_access
  class bad_variant_access;

  // ?.13, Hash support
  template <class T> struct hash;
  template <class... Types> struct hash<variant<Types...>>;
  template <> struct hash<monostate>;

  // ?.14, Allocator-related traits
  template <class T, class Alloc> struct uses_allocator;
  template <class... Types, class Alloc>
  struct uses_allocator<variant<Types...>, Alloc>;
  
} // namespace std

*/

#include <__config>
#include <tuple>
#include <__functional_base>
#include <type_traits>
#include <initializer_list>

#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#pragma GCC system_header
#endif


namespace std { // explicitly not using versioning namespace

class _LIBCPP_EXCEPTION_ABI bad_variant_access : public exception{
public:
   bad_variant_access() noexcept : exception() {}
   _LIBCPP_FUNC_VIS const char* what() const noexcept;
};

} // end namespace std

#if _LIBCPP_STD_VER > 14

_LIBCPP_BEGIN_NAMESPACE_STD

template <class... _Types> class variant;

  // ?.4, variant helper classes
template <class _Tp> struct variant_size; // undefined
template <class _Tp> struct variant_size<const _Tp> : variant_size<_Tp> {};
template <class _Tp> struct variant_size<volatile _Tp> : variant_size<_Tp> {};
template <class _Tp> struct variant_size<const volatile _Tp> : variant_size<_Tp> {};
template <class _Tp> constexpr size_t variant_size_v
    = variant_size<_Tp>::value;

template <class... _Types>
struct variant_size<variant<_Types...>>
    : integral_constant<size_t, sizeof...(_Types)> {};

template <size_t _Idx, class _Tp> struct variant_alternative; // undefined
template <size_t _Idx, class _Tp> struct variant_alternative<_Idx, const _Tp> {
    using type = typename variant_alternative<_Idx, _Tp>::type const;
};
template <size_t _Idx, class _Tp> struct variant_alternative<_Idx, volatile _Tp> {
  using type = typename variant_alternative<_Idx, _Tp>::type volatile;
};
template <size_t _Idx, class _Tp> struct variant_alternative<_Idx, const volatile _Tp> {
  using type = typename variant_alternative<_Idx, _Tp>::type const volatile;
};
template <size_t _Idx, class _Tp>
using variant_alternative_t = typename variant_alternative<_Idx, _Tp>::type;

template <size_t _Idx, class... _Types>
struct variant_alternative<_Idx, variant<_Types...>> {
  static_assert(_Idx < sizeof...(_Types), "Index is out of range");
  using type = typename tuple_element<_Idx, __tuple_types<_Types...>>::type;
};

constexpr size_t variant_npos = -1;

template <class>
struct _LIBCPP_TYPE_VIS_ONLY in_place_type_t {
    explicit in_place_type_t() = default;
};

template <class _Tp>
constexpr in_place_type_t<_Tp> in_place_type{};

template <size_t>
struct _LIBCPP_TYPE_VIS_ONLY in_place_index_t {
    explicit in_place_index_t() = default;
};

template <size_t _Idx>
constexpr in_place_index_t<_Idx> in_place_index{};

template <class _Tp, class... _Types>
inline _LIBCPP_INLINE_VISIBILITY
constexpr bool holds_alternative(const variant<_Types...>&) noexcept;

template <size_t _Idx, class... _Types>
inline _LIBCPP_INLINE_VISIBILITY
constexpr variant_alternative_t<_Idx, variant<_Types...>>&
get(variant<_Types...>& __v) {
    return __v.__imp_.__get(in_place_index<_Idx>);
}

template <size_t _Idx, class... _Types>
inline _LIBCPP_INLINE_VISIBILITY
constexpr variant_alternative_t<_Idx, variant<_Types...>>&&
get(variant<_Types...>&& __v) {
    using _Tp = variant_alternative_t<_Idx, variant<_Types...>>;
    return static_cast<_Tp&&>(__v.__imp_.__get(in_place_index<_Idx>));
}

template <size_t _Idx, class... _Types>
inline _LIBCPP_INLINE_VISIBILITY
constexpr variant_alternative_t<_Idx, variant<_Types...>> const&
get(const variant<_Types...>& __v) {
    return __v.__imp_.__get(in_place_index<_Idx>);
}

template <size_t _Idx, class... _Types>
inline _LIBCPP_INLINE_VISIBILITY
constexpr variant_alternative_t<_Idx, variant<_Types...>> const&&
get(const variant<_Types...>&& __v) {
    using _Tp = variant_alternative_t<_Idx, variant<_Types...>>;
    return static_cast<_Tp const&&>(__v.__imp_.__get(in_place_index<_Idx>));
}

template <class _Tp, class... _Types>
inline _LIBCPP_INLINE_VISIBILITY
constexpr _Tp& get(variant<_Types...>& __v) {
    return _VSTD::get<__find_exactly_one_t<_Tp, _Types...>::value>(__v);
}

template <class _Tp, class... _Types>
inline _LIBCPP_INLINE_VISIBILITY
constexpr _Tp&& get(variant<_Types...>&& __v) {
    return _VSTD::get<__find_exactly_one_t<_Tp, _Types...>::value>(_VSTD::move(__v));
}

template <class _Tp, class... _Types>
inline _LIBCPP_INLINE_VISIBILITY
constexpr const _Tp& get(const variant<_Types...>& __v) {
    return _VSTD::get<__find_exactly_one_t<_Tp, _Types...>::value>(__v);
}

template <class _Tp, class... _Types>
inline _LIBCPP_INLINE_VISIBILITY
constexpr const _Tp&& get(const variant<_Types...>&& __v) {
    return _VSTD::get<__find_exactly_one_t<_Tp, _Types...>::value>(_VSTD::move(__v));
}

template <size_t _Idx, class... _Types>
inline _LIBCPP_INLINE_VISIBILITY
constexpr add_pointer_t<variant_alternative_t<_Idx, variant<_Types...>>>
get_if(variant<_Types...>* __v) noexcept;

template <size_t _Idx, class... _Types>
inline _LIBCPP_INLINE_VISIBILITY
constexpr add_pointer_t<const variant_alternative_t<_Idx, variant<_Types...>>>
get_if(const variant<_Types...>*) noexcept;

template <class _Tp, class... _Types>
inline _LIBCPP_INLINE_VISIBILITY
constexpr add_pointer_t<_Tp> get_if(variant<_Types...>*) noexcept;

template <class _Tp, class... _Types>
inline _LIBCPP_INLINE_VISIBILITY
constexpr add_pointer_t<const _Tp> get_if(const variant<_Types...>*) noexcept;

struct _LIBCPP_TYPE_VIS_ONLY monostate {};

template <class... _Types, class _Alloc>
struct _LIBCPP_TYPE_VIS_ONLY uses_allocator<variant<_Types...>, _Alloc> : true_type {};

template <size_t _Idx, class _Tp>
struct __variant_element {
    template <class ..._Args>
    constexpr __variant_element(_Args&& ...__args)
        : __which_(_Idx), __value_(_VSTD::forward<_Args>(__args)...) {}

    size_t __which_;
    _Tp __value_;
};

struct __variant_end_element {
    constexpr __variant_end_element() : __which_(variant_npos) {}
    size_t __which_;
};

template <bool _IsTriviallyDestructible, size_t _Idx, class ..._Types>
union _LIBCPP_TYPE_VIS_ONLY __variant_union {
    static_assert(sizeof...(_Types) == 0, "Specialization is for an empty union");
    __variant_end_element __head_;
};

template <size_t _Idx, class _T0,  class ..._TRest>
union _LIBCPP_TYPE_VIS_ONLY __variant_union<true, _Idx, _T0, _TRest...> {
    template <class ..._Args>
    constexpr __variant_union(in_place_index_t<0>, _Args&&... __args)
        : __head_(_VSTD::forward<_Args>(__args)...) {}

    template <size_t _OtherIdx, class ..._Args>
    constexpr __variant_union(in_place_index_t<_OtherIdx>, _Args&&... __args)
        : __tail_(in_place_index<_OtherIdx - 1>, _VSTD::forward<_Args>(__args)...) {}

    constexpr _T0& __get(in_place_index_t<0>) noexcept
    { return __head_.__value_; }

    constexpr const _T0& __get(in_place_index_t<0>) const noexcept
    { return __head_.__value_; }

    template <size_t _OIdx, enable_if_t<_OIdx - 1 <= sizeof...(_TRest), bool> = true>
    constexpr tuple_element_t<_OIdx - 1, __tuple_types<_TRest...>>&
    __get(in_place_index_t<_OIdx>) noexcept
    { return __tail_.__get(in_place_index<_OIdx - 1>); }

    template <size_t _OIdx, enable_if_t<_OIdx - 1 <= sizeof...(_TRest), bool> = true>
    constexpr tuple_element_t<_OIdx - 1, __tuple_types<_TRest...>> const &
    __get(in_place_index_t<_OIdx>) const noexcept
    { return __tail_.__get(in_place_index<_OIdx - 1>); }

    ~__variant_union() = default;
public:
    __variant_element<_Idx, _T0> __head_;
    __variant_union<true, _Idx + 1, _TRest...> __tail_;
};

template <size_t _Idx, class _T0,  class ..._TRest>
union _LIBCPP_TYPE_VIS_ONLY __variant_union<false, _Idx, _T0, _TRest...> {
    using _TailT =  __variant_union<false, _Idx + 1, _TRest...>;

    template <class ..._Args>
    constexpr __variant_union(in_place_index_t<0>, _Args&&... __args)
        : __head_(_VSTD::forward<_Args>(__args)...) {}

    template <size_t _OtherIdx, class ..._Args>
    constexpr __variant_union(in_place_index_t<_OtherIdx>, _Args&&... __args)
        : __tail_(in_place_index<_OtherIdx - 1>, _VSTD::forward<_Args>(__args)...) {}

    constexpr _T0& __get(in_place_index_t<0>) noexcept
    { return __head_.__value_; }

    constexpr const _T0& __get(in_place_index_t<0>) const noexcept
    { return __head_.__value_; }

    template <size_t _OIdx, enable_if_t<_OIdx - 1 <= sizeof...(_TRest), bool> = true>
    constexpr tuple_element_t<_OIdx - 1, __tuple_types<_TRest...>>&
    __get(in_place_index_t<_OIdx>) noexcept
    { return __tail_.__get(in_place_index<_OIdx - 1>); }

    template <size_t _OIdx, enable_if_t<_OIdx - 1 <= sizeof...(_TRest), bool> = true>
    constexpr tuple_element_t<_OIdx - 1, __tuple_types<_TRest...>> const &
    __get(in_place_index_t<_OIdx>) const noexcept
    { return __tail_.__get(in_place_index<_OIdx - 1>); }

    ~__variant_union() {
        if (__head_.__which_ == _Idx) {
            __head_.~__variant_element();
        } else {
            __tail_.~_TailT();
        }
    }

public:
    __variant_element<_Idx, _T0> __head_;
    _TailT __tail_;
};

template <>
class _LIBCPP_TYPE_VIS_ONLY variant<> {
    // TODO(EricWF) WTF?
};

template <class... _Types>
class _LIBCPP_TYPE_VIS_ONLY variant {
    using _IsTriviallyDestructible = __all<is_trivially_destructible<_Types>::value...>;
    using _Imp = __variant_union<_IsTriviallyDestructible::value, 0, _Types...>;
public:
    _Imp __imp_;
public:
    // ?.3.1 Constructors
    constexpr variant()
        noexcept(is_nothrow_default_constructible<
            variant_alternative_t<0, variant<_Types...>>>::value)
        : __imp_(in_place_index<0>) {}

    variant(const variant&);
    variant(variant&&) /* TODO noexcept(see below) */;

    template <class _Tp> constexpr variant(_Tp&&) /* TODO noexcept(see below) */;

    template <class _Tp, class... _Args>
    constexpr explicit variant(in_place_type_t<_Tp>, _Args&&...);

    template <class _Tp, class _Up, class... _Args>
    constexpr explicit variant(in_place_type_t<_Tp>, initializer_list<_Up>, _Args&&...);

    template <size_t _Idx, class... _Args>
    constexpr explicit variant(in_place_index_t<_Idx> __i, _Args&&... __args)
        : __imp_(__i, _VSTD::forward<_Args>(__args)...) {}

    template <size_t _Idx, class _Up, class... _Args>
    constexpr explicit variant(in_place_index_t<_Idx>, initializer_list<_Up>, _Args&&...);

    // allocator-extended constructors
    template <class _Alloc>
    variant(allocator_arg_t, const _Alloc&);
    template <class _Alloc>
    variant(allocator_arg_t, const _Alloc&, const variant&);
    template <class _Alloc>
    variant(allocator_arg_t, const _Alloc&, variant&&);
    template <class _Alloc, class _Tp>
    variant(allocator_arg_t, const _Alloc&, _Tp&&);
    template <class _Alloc, class _Tp, class... _Args>
    variant(allocator_arg_t, const _Alloc&, in_place_type_t<_Tp>, _Args&&...);
    template <class _Alloc, class _Tp, class _Up, class... _Args>
    variant(allocator_arg_t, const _Alloc&, in_place_type_t<_Tp>, initializer_list<_Up>, _Args&&...);
    template <class _Alloc, size_t _Idx, class... _Args>
    variant(allocator_arg_t, const _Alloc&, in_place_index_t<_Idx>, _Args&&...);
    template <class _Alloc, size_t _Idx, class _Up, class... _Args>
    variant(allocator_arg_t, const _Alloc&, in_place_index_t<_Idx>, initializer_list<_Up>, _Args&&...);

    // ?.3.2, Destructor
    ~variant() = default;

    // ?.3.3, Assignment
    variant& operator=(const variant&);
    variant& operator=(variant&&) /* TODO noexcept(see below) */;
    
    template <class _Tp> variant& operator=(_Tp&&) /* TODO noexcept(see below) */;
    
    // ?.3.4, Modifiers
    template <class _Tp, class... _Args> void emplace(_Args&&...);
    template <class _Tp, class _Up, class... _Args>
    void emplace(initializer_list<_Up>, _Args&&...);
    template <size_t _Idx, class... _Args> void emplace(_Args&&...);
    template <size_t _Idx, class _Up, class... _Args>
    void emplace(initializer_list<_Up>, _Args&&...);
    
    // ?.3.5, Value status
    _LIBCPP_INLINE_VISIBILITY
    constexpr bool valueless_by_exception() const noexcept {
        return index() == variant_npos;
    }

    _LIBCPP_INLINE_VISIBILITY
    constexpr size_t index() const noexcept {
        return __imp_.__head_.__which_;
    }

    // ?.3.6, Swap
    void swap(variant&) /* TODO noexcept(see below) */;
};

_LIBCPP_END_NAMESPACE_STD

#endif // _LIBCPP_STD_VER > 14

#endif  // _LIBCPP_VARIANT
